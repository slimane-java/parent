version: "1.1"

networks:
  kafka-net:
    name: kafka-net
    driver: bridge
services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: "zookeeper"
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: "kafka"
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-192.168.99.100}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - kafka-net
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  redis-service:
    image: redis:2.8.7
    restart: always
    ports:
      - 6379:6379
    volumes:
      - catch:/var/catch/data

  mysql-service:
    image: mysql:8.0.31
    restart: unless-stopped
    container_name: mysql-db2
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql

#  postgresql-service:
#    image: postgres:15
#    restart: unless-stopped
#    container_name: postgresql-db2
#    environment:
#       POSTGRES_USER:postgres
#       POSTGRES_PASSWORD:root
#    ports:
#      - 5432:5432
#    volumes:
#      - postgresql-data:/var/lib/postgresql

  eureka-server:
    build:
      context: eureka/.
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8761:8761

#  gateway-server:
#    build:
#      context: gateway/.
#      dockerfile: DockerFile
#    restart: always
#    ports:
#      - 8060:8060
#
#  demo-server2:
#    depends_on:
#      - mysql-service
#      - redis-service
#    build:
#      context: demoServer2/.
#      dockerfile: Dockerfile
#    restart: always
#    ports:
#      - 8082:8082
#    environment:
#      SPRING_APPLICATION_JSON: '{
#        "spring.datasource.url"  : "jdbc:mysql://192.168.99.100:3306/app3?createDatabaseIfNotExist=true",
#        "spring.datasource.username" : "root",
#        "spring.datasource.password" : "root",
#        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5Dialect",
#        "spring.datasource.driver-class-name" : "com.mysql.cj.jdbc.Driver",
#        "spring.jpa.hibernate.ddl-auto" : "update",
#        "spring.data.redis.host" : "192.168.99.100",
#        "spring.data.redis.port" : "6379"
#      }'
#    stdin_open: true
#    tty: true
#
#  demo-server1:
#    depends_on:
#      - mysql-service
#    build:
#      context: demoServer1/.
#      dockerfile: Dockerfile
#    restart: always
#    ports:
#      - 8089:8089
#    environment:
#      SPRING_APPLICATION_JSON: '{
#        "spring.datasource.url"  : "jdbc:mysql://192.168.99.100:3306/app1?createDatabaseIfNotExist=true",
#        "spring.datasource.username" : "root",
#        "spring.datasource.password" : "root",
#        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5Dialect",
#        "spring.datasource.driver-class-name" : "com.mysql.cj.jdbc.Driver",
#        "spring.jpa.hibernate.ddl-auto" : "update"
#      }'
#    stdin_open: true
#    tty: true

#  graphql-server:
#    depends_on:
#      - postgresql-service
#    build:
#      context: graphql/.
#      dockerfile: DockerFile
#    restart: always
#    ports:
#      - 8045:8045
#    environment:
#      SPRING_APPLICATION_JSON: '{
#        "spring.datasource.url"  : "jdbc:postgresql://192.168.99.100:3306/graphql?createDatabaseIfNotExist=true",
#        "spring.datasource.username" : "postgres",
#        "spring.datasource.password" : "root",
#        "spring.datasource.driver-class-name" : "org.postgresql.Driver",
#        "spring.jpa.hibernate.ddl-auto" : "update"
#      }'


volumes:
  postgresql-data:
  mysql-data:
  catch:


